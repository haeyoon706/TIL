{"componentChunkName":"component---src-templates-post-jsx","path":"/closure/","result":{"data":{"site":{"siteMetadata":{"title":"haeyoon"}},"markdownRemark":{"id":"2480a971-703a-5635-b78e-aef31526a17d","excerpt":"closure란 클로저는 부모 함수 안에서 자식 함수를 선언하면 자식함수를 어디에서 호출하더라도 자식함수 안에서 부모함수의 변수에 접근할 수 있음\n\n   fn2의 스코프에서 fn1의 값을 가지고 올 수 없음  local -> closure -> script closure에서 찾은 l1값 ! -> 함수를 다른 함수 내에 정의 하면 부모 함수의 스코프에 접근…","html":"<h2>closure란</h2>\n<p>클로저는 부모 함수 안에서 자식 함수를 선언하면<br>\n자식함수를 어디에서 호출하더라도 자식함수 안에서 부모함수의 변수에 접근할 수 있음\n<br/>\n<br/>  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> l0 <span class=\"token operator\">=</span> <span class=\"token string\">'l0'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> l2 <span class=\"token operator\">=</span> <span class=\"token string\">'l2'</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>l0<span class=\"token punctuation\">,</span> l1<span class=\"token punctuation\">,</span> l2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> l1 <span class=\"token operator\">=</span> <span class=\"token string\">'l1'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>fn2의 스코프에서 fn1의 값을 가지고 올 수 없음<br>\n<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> l0 <span class=\"token operator\">=</span> <span class=\"token string\">'l0'</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// fn2()는 내부 함수이자 클로저</span>\n        <span class=\"token keyword\">let</span> l2 <span class=\"token operator\">=</span> <span class=\"token string\">'l2'</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>l0<span class=\"token punctuation\">,</span> l1<span class=\"token punctuation\">,</span> l2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// l0 l1 l2</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> l1 <span class=\"token operator\">=</span> <span class=\"token string\">'l1'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>local -> closure -> script<br>\nclosure에서 찾은 l1값 !<br>\n-> 함수를 다른 함수 내에 정의 하면 부모 함수의 스코프에 접근 가능  </p>\n<h2>dynamic scope (동적 스코프)</h2>\n<p>어디서 호출 하느냐에 따라 접근할 수 있는 유효범위가 달라지는 것<br>\nbut javascript는 정적 스코프  </p>\n<h2>static scope, lexical scope (정적 스코프)</h2>\n<p>어디서 호출 했느냐가 아니라<br>\n어디서 정의 되었느냐에 따라 유효 범위가 달라짐  </p>\n<br/>\n<h2>참고</h2>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=bwwaSwf7vkE\">https://www.youtube.com/watch?v=bwwaSwf7vkE</a></li>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Closures\">https://developer.mozilla.org/ko/docs/Web/JavaScript/Closures</a></li>\n</ul>","frontmatter":{"title":"Closure (1)","date":"August 01, 2024","update":"August 01, 2024","tags":["javascript"],"series":"Execution Context"},"fields":{"slug":"/closure/","readingTime":{"minutes":1.405}}},"seriesList":{"edges":[{"node":{"id":"fb630731-ce7d-515c-8581-fbf950d46507","fields":{"slug":"/execution context/"},"frontmatter":{"title":"Execution Context(실행 컨텍스트)란"}}},{"node":{"id":"2480a971-703a-5635-b78e-aef31526a17d","fields":{"slug":"/closure/"},"frontmatter":{"title":"Closure (1)"}}},{"node":{"id":"2adeea1f-bb0a-5674-b897-89011f1cd5e1","fields":{"slug":"/closure_2/"},"frontmatter":{"title":"Closure (2)"}}}]},"previous":{"fields":{"slug":"/call apply bind/"},"frontmatter":{"title":"call / bind / apply"}},"next":{"fields":{"slug":"/closure_2/"},"frontmatter":{"title":"Closure (2)"}}},"pageContext":{"id":"2480a971-703a-5635-b78e-aef31526a17d","series":"Execution Context","previousPostId":"bb1af412-0b3c-5f41-9def-e34215d377eb","nextPostId":"2adeea1f-bb0a-5674-b897-89011f1cd5e1"}},"staticQueryHashes":[],"slicesMap":{}}