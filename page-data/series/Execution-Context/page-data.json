{"componentChunkName":"component---src-templates-series-jsx","path":"/series/Execution-Context/","result":{"data":{"posts":{"nodes":[{"excerpt":"실행 가능한 자바스크립트의 코드 블록 실행 컨텍스트란 실행할 코드에 제공할 환경 정보들을 모아놓은 객체 여기서 환경이란 전역공간 혹은 함수 내부의 환경을 의미 해당 환경에는 변수, 함수, this, arguments 등에 대한 정보를 담고 있음 자바스크립트 엔진에서 코드가 실행 된다는 것은 실행 컨텍스트 내부에서 코드가 실행되고 있다는 의미 컨텍스트 종류…","fields":{"slug":"/execution context/"},"frontmatter":{"date":"July 02, 2024","update":"Jul 03, 2024","title":"Execution Context(실행 컨텍스트)란","tags":["javascript"]}},{"excerpt":"closure란 클로저는 부모 함수 안에서 자식 함수를 선언하면 자식함수를 어디에서 호출하더라도 자식함수 안에서 부모함수의 변수에 접근할 수 있음\n\n   fn2의 스코프에서 fn1의 값을 가지고 올 수 없음  local -> closure -> script closure에서 찾은 l1값 ! -> 함수를 다른 함수 내에 정의 하면 부모 함수의 스코프에 접근…","fields":{"slug":"/closure/"},"frontmatter":{"date":"August 01, 2024","update":"Aug 01, 2024","title":"Closure (1)","tags":["javascript"]}},{"excerpt":"closure의 사용 데이터 은닉(캠슐화) 자바스크립트에서는 제공하지 않는 private method 기능 구현 가능 private method : 같은 클래스 내부의 특정 메서드에서만 해당 메서드 호출 가능 상태 유지 closure의 사전적 의미는 '폐쇠' 특정 데이터를 스코프 안에 가두어 둔 채로 계속 사용 가능 -> 메모리 측면에서 손해 참고 htt…","fields":{"slug":"/closure_2/"},"frontmatter":{"date":"August 01, 2024","update":"Aug 01, 2024","title":"Closure (2)","tags":["javascript"]}}]}},"pageContext":{"series":"Execution Context"}},"staticQueryHashes":[],"slicesMap":{}}