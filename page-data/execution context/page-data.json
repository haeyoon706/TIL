{"componentChunkName":"component---src-templates-post-jsx","path":"/execution context/","result":{"data":{"site":{"siteMetadata":{"title":"haeyoon"}},"markdownRemark":{"id":"fb630731-ce7d-515c-8581-fbf950d46507","excerpt":"실행 가능한 자바스크립트의 코드 블록 실행 컨텍스트란 실행할 코드에 제공할 환경 정보들을 모아놓은 객체 여기서 환경이란 전역공간 혹은 함수 내부의 환경을 의미 해당 환경에는 변수, 함수, this, arguments 등에 대한 정보를 담고 있음 자바스크립트 엔진에서 코드가 실행 된다는 것은 실행 컨텍스트 내부에서 코드가 실행되고 있다는 의미 컨텍스트 종류…","html":"<h2>실행 가능한 자바스크립트의 코드 블록</h2>\n<blockquote>\n<p>실행 컨텍스트란 실행할 코드에 제공할 환경 정보들을 모아놓은 객체<br>\n여기서 환경이란 전역공간 혹은 함수 내부의 환경을 의미<br>\n해당 환경에는 변수, 함수, this, arguments 등에 대한 정보를 담고 있음<br>\n자바스크립트 엔진에서 코드가 실행 된다는 것은 실행 컨텍스트 내부에서 코드가 실행되고 있다는 의미</p>\n</blockquote>\n<br/>\n<h2>컨텍스트 종류</h2>\n<p>자바스크립트의 코드는 아래 세 종류가 있음</p>\n<ol>\n<li>글로벌 스코프에서 실행하는 글로벌 코드</li>\n<li>함수 스코프에서 실행하는 함수 코드</li>\n<li>eval()로 강제 실행되는 코드 (사용하지 않음)</li>\n</ol>\n<br/>\n<p>각각의 코드는 자신만의 실행 컨텍스트를 생성<br>\n엔진이 스크립트 파일 실행 전 글로벌 실행 컨텍스트(GEC)가 생성되고,<br>\n함수가 호출될 때마다 함수 실행 컨텍스트(FEC)가 생성되어<br>\n자바스크립트 엔진의 Call Stack이라는 곳에 쌓이게 됨</p>\n<h3>예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 1</span>\n\n<span class=\"token keyword\">let</span> hi <span class=\"token operator\">=</span> <span class=\"token string\">\"Hi\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> hello <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<ol>\n<li>가장 먼저 글로벌 실행 컨텍스트(GEC) 생성<br>\n스택의 가장 아래에 위치</li>\n<li>bar() 함수 호출 시 해당 함수의 함수 실행 컨텍스트(FEC) 생성<br>\n1에서 생성된 GEC 위로 올라감</li>\n<li>bar() 함수 안에서 foo() 호출 시 또 다른 FEC 생성<br>\n2에서 생성된 FEC 위로 올라감</li>\n<li>foo() 함수 리턴 시 3에서 생성된 FEC를 스택에서 제거</li>\n<li>bar() 함수 리턴 시 2에서 생성된 FEC를 스택에서 제거</li>\n<li>GEC만 남음</li>\n</ol>\n<br/>\n<h2>컨텍스트 구성 요소</h2>\n<h3>1. Variable Environment</h3>\n<p>현재 컨텍스트 내부의 식별자 정보인 'Environment Record'와\n외부 환경 정보 'Outer Environment Reference'가 포함되어 있음<br>\nVariable Environment에 먼저 정보를 담고, Lexical Environment에 복사해서 사용</p>\n<h3>2. Lexical Environment</h3>\n<p>초기에는 Variable Environment와 같지만 변경사항이 실시간으로 적용 되므로 최신 상태를 저장하고 있음</p>\n<h3>예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> hi <span class=\"token operator\">=</span> <span class=\"token string\">\"Hi\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> hello <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>hi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>foo() 함수에서 hello는 Environment Record</li>\n<li>foo() 함수에서 hi 호출 시 Outer Environment Reference를 통해 상위 컨텍스트에 접근 가능</li>\n<li>순서: Environment Record -> Outer Environment Reference</li>\n<li>위 과정을 스코프 체인이라고 함</li>\n</ul>\n<h3>3. This Binding</h3>\n<p>this는 현재 컨텍스트를 가리킴</p>\n<br/>\n<h2>참고</h2>\n<ul>\n<li><a href=\"https://github.com/baeharam/Must-Know-About-Frontend/blob/main/Notes/javascript/execution-context.md\">https://github.com/baeharam/Must-Know-About-Frontend/blob/main/Notes/javascript/execution-context.md</a></li>\n<li><a href=\"https://gamguma.dev/post/2022/04/js_execution_context\">https://gamguma.dev/post/2022/04/js_execution_context</a></li>\n<li><a href=\"https://blog.naver.com/dlaxodud2388/222655214381\">https://blog.naver.com/dlaxodud2388/222655214381</a></li>\n</ul>","frontmatter":{"title":"Execution Context(실행 컨텍스트)란","date":"July 02, 2024","update":"July 03, 2024","tags":["javascript"],"series":"Execution Context"},"fields":{"slug":"/execution context/","readingTime":{"minutes":3.36}}},"seriesList":{"edges":[{"node":{"id":"fb630731-ce7d-515c-8581-fbf950d46507","fields":{"slug":"/execution context/"},"frontmatter":{"title":"Execution Context(실행 컨텍스트)란"}}}]},"previous":null,"next":null},"pageContext":{"id":"fb630731-ce7d-515c-8581-fbf950d46507","series":"Execution Context","previousPostId":null,"nextPostId":null}},"staticQueryHashes":[],"slicesMap":{}}