<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[RSS Feed of haeyoon]]></title><description><![CDATA[Hello :) I'm Haeyoon]]></description><link>https://haeyoon706.github.io/TIL</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 03 Jul 2024 02:27:19 GMT</lastBuildDate><item><title><![CDATA[Execution Context(실행 컨텍스트)란]]></title><description><![CDATA[실행 가능한 자바스크립트의 코드 블록 실행 컨텍스트란 실행할 코드에 제공할 환경 정보들을 모아놓은 객체 여기서 환경이란 전역공간 혹은 함수 내부의 환경을 의미 해당 환경에는 변수, 함수, this, arguments…]]></description><link>https://haeyoon706.github.io/TIL/execution context/</link><guid isPermaLink="false">https://haeyoon706.github.io/TIL/execution context/</guid><pubDate>Tue, 02 Jul 2024 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;실행 가능한 자바스크립트의 코드 블록&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;실행 컨텍스트란 실행할 코드에 제공할 환경 정보들을 모아놓은 객체&lt;br&gt;
여기서 환경이란 전역공간 혹은 함수 내부의 환경을 의미&lt;br&gt;
해당 환경에는 변수, 함수, this, arguments 등에 대한 정보를 담고 있음&lt;br&gt;
자바스크립트 엔진에서 코드가 실행 된다는 것은 실행 컨텍스트 내부에서 코드가 실행되고 있다는 의미&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;
&lt;h2&gt;컨텍스트 종류&lt;/h2&gt;
&lt;p&gt;자바스크립트의 코드는 아래 세 종류가 있음&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;글로벌 스코프에서 실행하는 글로벌 코드&lt;/li&gt;
&lt;li&gt;함수 스코프에서 실행하는 함수 코드&lt;/li&gt;
&lt;li&gt;eval()로 강제 실행되는 코드 (사용하지 않음)&lt;/li&gt;
&lt;/ol&gt;
&lt;br/&gt;
&lt;p&gt;각각의 코드는 자신만의 실행 컨텍스트를 생성&lt;br&gt;
엔진이 스크립트 파일 실행 전 글로벌 실행 컨텍스트(GEC)가 생성되고,&lt;br&gt;
함수가 호출될 때마다 함수 실행 컨텍스트(FEC)가 생성되어&lt;br&gt;
자바스크립트 엔진의 Call Stack이라는 곳에 쌓이게 됨&lt;/p&gt;
&lt;h3&gt;예시&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 1&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; hi &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hi&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; hello &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 3&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;가장 먼저 글로벌 실행 컨텍스트(GEC) 생성&lt;br&gt;
스택의 가장 아래에 위치&lt;/li&gt;
&lt;li&gt;bar() 함수 호출 시 해당 함수의 함수 실행 컨텍스트(FEC) 생성&lt;br&gt;
1에서 생성된 GEC 위로 올라감&lt;/li&gt;
&lt;li&gt;bar() 함수 안에서 foo() 호출 시 또 다른 FEC 생성&lt;br&gt;
2에서 생성된 FEC 위로 올라감&lt;/li&gt;
&lt;li&gt;foo() 함수 리턴 시 3에서 생성된 FEC를 스택에서 제거&lt;/li&gt;
&lt;li&gt;bar() 함수 리턴 시 2에서 생성된 FEC를 스택에서 제거&lt;/li&gt;
&lt;li&gt;GEC만 남음&lt;/li&gt;
&lt;/ol&gt;
&lt;br/&gt;
&lt;h2&gt;컨텍스트 구성 요소&lt;/h2&gt;
&lt;h3&gt;1. Variable Environment&lt;/h3&gt;
&lt;p&gt;현재 컨텍스트 내부의 식별자 정보인 &apos;Environment Record&apos;와
외부 환경 정보 &apos;Outer Environment Reference&apos;가 포함되어 있음&lt;br&gt;
Variable Environment에 먼저 정보를 담고, Lexical Environment에 복사해서 사용&lt;/p&gt;
&lt;h3&gt;2. Lexical Environment&lt;/h3&gt;
&lt;p&gt;초기에는 Variable Environment와 같지만 변경사항이 실시간으로 적용 되므로 최신 상태를 저장하고 있음&lt;/p&gt;
&lt;h3&gt;예시&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; hi &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hi&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; hello &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hi&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;foo() 함수에서 hello는 Environment Record&lt;/li&gt;
&lt;li&gt;foo() 함수에서 hi 호출 시 Outer Environment Reference를 통해 상위 컨텍스트에 접근 가능&lt;/li&gt;
&lt;li&gt;순서: Environment Record -&gt; Outer Environment Reference&lt;/li&gt;
&lt;li&gt;위 과정을 스코프 체인이라고 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3. This Binding&lt;/h3&gt;
&lt;p&gt;this는 현재 컨텍스트를 가리킴&lt;/p&gt;
&lt;br/&gt;
&lt;h2&gt;참고&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/baeharam/Must-Know-About-Frontend/blob/main/Notes/javascript/execution-context.md&quot;&gt;https://github.com/baeharam/Must-Know-About-Frontend/blob/main/Notes/javascript/execution-context.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gamguma.dev/post/2022/04/js_execution_context&quot;&gt;https://gamguma.dev/post/2022/04/js_execution_context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.naver.com/dlaxodud2388/222655214381&quot;&gt;https://blog.naver.com/dlaxodud2388/222655214381&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item></channel></rss>